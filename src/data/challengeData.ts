export const challengeHints: Record<string, string[]> = {
  '1': [
    'Изучите документацию по JWT и его структуре (header.payload.signature)',
    'Обратите внимание на алгоритм подписи JWT токена',
    'Попробуйте использовать jwt_tool или jwt.io для анализа и манипуляции с токеном',
    'Слабый секрет может быть уязвим к брутфорс-атаке или словарной атаке',
  ],
  '2': [
    'Изучите метаданные изображения с помощью специальных инструментов',
    'Проверьте наличие скрытой информации в младших битах изображения (LSB стеганография)',
    'Попробуйте изменить контрастность или цветовые каналы изображения',
  ],
  '3': [
    'Обратите внимание на подсказку о "названии команды" (CyberWhale) и цикличности алфавита',
    'Подсчитайте сумму позиций букв в названии CyberWhale в английском алфавите',
    'Помните, что шифр Цезаря использует циклический сдвиг букв алфавита',
  ],
  '4': [
    'Используйте декомпилятор для анализа бинарного файла',
    'Обратите внимание на строковые константы в коде',
    'Проверьте функции проверки ввода пользователя',
  ],
  '5': [
    'Используйте Wireshark для анализа pcap-файла',
    'Обратите внимание на необычные HTTP-запросы',
    'Проверьте заголовки пакетов на наличие скрытой информации',
  ],
  '6': [
    'Проанализируйте входные данные, которые приводят к переполнению буфера',
    'Найдите адрес возврата функции в памяти',
    'Подготовьте payload с шеллкодом для выполнения',
  ],
  '7': [
    'Внимательно изучите подсказку в файле hint.txt о комбинации названия компании и цифры',
    'Для вычисления ASCII-значений букв можно использовать таблицу ASCII или функции языков программирования',
    'После распаковки архива, обратите внимание на формат зашифрованных данных - это может быть Base64 с AES-шифрованием',
  ],
  '8': [
    'Начните с анализа заметок в notes.txt, они могут содержать ключи или подсказки',
    'Проверьте сетевой трафик с помощью Wireshark, ищите необычные пакеты или закономерности',
    'Для работы с зашифрованным изображением может потребоваться использовать инструменты стеганографии',
  ],
  '9': [
    'Проанализируйте, как формируется SQL-запрос к базе данных при поиске сотрудников',
    'Попробуйте разные символы, которые могут нарушить структуру SQL-запроса (например, одинарная кавычка)',
    'Изучите, как можно использовать оператор UNION для объединения результатов нескольких запросов',
    'Подумайте, где может храниться структура базы данных в SQLite',
  ],
  '10': [
    'Проверьте форму входа на SQL-инъекции. Попробуйте использовать комментарии для обхода проверки (например, --).',
    'Исследуйте API-эндпоинты на наличие уязвимостей CORS. Попробуйте запросы с другими доменами.',
    'Используйте SSRF для доступа к внутреннему серверу. Проверьте порт 8080 через URL-параметр.',
    'Флаг спрятан в PCAP-файле. Скачайте его через уязвимость и проанализируйте в Wireshark.',
  ],
};

export const challengeFlags: Record<string, string> = {
  '1': 'CTF{Ph4nt0m_V4u1t_Expl01t_MASTER}',
  '2': 'CW{H1dd3n_1n_pl41n_s1ght}',
  '3': 'CW{SecretFound}',
  '4': 'CW{R3v3rs1ng_Ch4mp}',
  '5': 'CW{P4ck3t_4n4lyst}',
  '6': 'CW{Buff3r_0v3rfl0w_pr0}',
  '7': 'CW{HiddenInPlainSight}',
  '8': 'CW{Caesar_AES_Stego}',
  '9': 'CW{HR_Leak_Protection_Fail}',
  '10': 'CW{550e8400-e29b-41d4-a716-446655440000}',
};